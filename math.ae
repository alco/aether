type flt = float32 | float64

// The implementations for most of the functions below are linked in

// ** Trigonometric functions **

// Compute cosine
fn cos(x) :: flt -> flt
// Compute sine
fn sin(x) :: flt -> flt
// Compute tangent
fn tan(x) :: flt -> flt
// Compute arc cosine
fn acos(x) :: flt -> flt
// Compute arc sine
fn asin(x) :: flt -> flt
// Compute arc tangent
fn atan(x) :: flt -> flt
// Compute arc tangent with two parameters
fn atan2(x) :: flt -> flt


// ** Hyperbolic functions **

// Compute hyperbolic cosine
fn cosh(x) :: flt -> flt
// Compute hyperbolic sine
fn sinh(x) :: flt -> flt
// Compute hyperbolic tangent
fn tanh(x) :: flt -> flt
// Compute arc hyperbolic cosine
fn acosh(x) :: flt -> flt
// Compute arc hyperbolic sine
fn asinh(x) :: flt -> flt
// Compute arc hyperbolic tangent
fn atanh(x) :: flt -> flt


// ** Exponential and logarithmic functions **

// Compute exponential function
fn exp(x) :: flt -> flt
// Compute exponential minus one
fn expm1(x) :: flt -> flt
// Get significand and exponent
fn frexp(x) :: flt -> (flt int)
// Generate value from significand and exponent
fn ldexp(x exp) :: (flt int) -> flt
// Break into fractional and integral parts
fn modf(x) :: flt -> (int flt)
// Compute floating-point base logarithm
fn log(base x) :: (flt flt) -> flt
// Compute natural logarithm
fn logn(x) :: flt -> flt
// Compute natural logarithm of (x + 1)
fn logp1(x) :: flt -> flt
// Integer binary logarithm
fn ilogb(x) :: flt -> int
// Scale significand using floating-point base exponent
fn scalbn(x n) :: (flt int) -> flt
fn scalbn(x n) :: (flt longint) -> flt


// ** Power functions **

// Raise to power
fn pow(base exp) :: (flt flt) -> flt
// Compute square root
fn sqrt(x) :: flt -> flt
// Compute cubic root
fn cbrt(x) :: flt -> flt
// Compute hypotenuse
fn hypot(x y) :: (flt flt) -> flt (
    sqrt(x² + y²)
)

///

// !! Final function definition syntax

// 1) fully inferred types
fn hypot(x y) (
    sqrt(x² + y²)
)
fn hypot(x y) sqrt(x² + y²)  // one-liner

// 2) in-between type spec
fn hypot(x y) :: (τ τ) -> τ (
    sqrt(x² + y²)
)
fn hypot(x y) :: (τ τ) -> τ sqrt(x² + y²) // one-liner

// 3) inline types
fn hypot(x: τ, y: τ) -> τ (
    sqrt(x² + y²)
)
fn hypot(x: τ, y: τ) -> τ sqrt(x² + y²)  // one-liner

// !!! no mixed style
fn hypot(x: τ, y: τ) -> τ :: (τ τ) -> τ ( // invalid
    sqrt(x² + y²)
)

/////////////////////////////////////

// !! Final function literal syntax

// 1) fully inferred types
fn(x y) sqrt(x² + y²)

// 2) inline types
fn(x: τ, y: τ) -> τ sqrt(x² + y²)

// 3) postfix spec
fn(x y) sqrt(x² + y²) :: (τ τ) -> τ

// 4) shortcut form
// vector length
fn sqrt(%1² + %2² + %3²) :: (τ τ τ) -> τ
fn sqrt(&1² + &2² + &3²) :: (τ τ τ) -> τ
fn sqrt(ア² + イ² + ウ²) :: (τ τ τ) -> τ
fn sqrt(一² + 二² + 三²) :: (τ τ τ) -> τ
fn sqrt(１² + ２² + ３²) :: (τ τ τ) -> τ
fn sqrt(①² + ②² + ③²) :: (τ τ τ) -> τ
fn sqrt(⑴² + ⑵² + ⑶²) :: (τ τ τ) -> τ
fn sqrt(⓵² + ⓶² + ⓷²) :: (τ τ τ) -> τ
fn sqrt(❶² + ❷² + ❸²) :: (τ τ τ) -> τ
fn sqrt(➀² + ➁² + ➂²) :: (τ τ τ) -> τ
fn sqrt(➊² + ➋² + ➌²) :: (τ τ τ) -> τ
fn sqrt(Ⅰ² + Ⅱ² + Ⅲ²) :: (τ τ τ) -> τ


////////////////////////////////////

fn hypot(x y) |τ τ -> τ| (
    sqrt(x² + y²)
)

fn hypot(x: τ, y: τ) -> τ (
    sqrt(x² + y²)
)

:: hypot(τ τ) -> τ           // +1
fn hypot(x y) (
    sqrt(x² + y²)
)

fn(x y) :: (τ, τ) -> τ (
    sqrt(x² + y²)
)

fn(x y) |τ τ -> τ| (
    sqrt(x² + y²)
)

fn(x y) (
    sqrt(x² + y²)
) :: τ τ -> τ

fn(x: τ, y: τ) -> τ (
    sqrt(x² + y²)
)

fn(x y) |τ τ -> τ| sqrt(x² + y²)
fn(x y) sqrt(x² + y²) :: τ τ -> τ

    fn(x: τ, y: τ) -> τ sqrt(x² + y²)
    fn(x: τ, y: τ) -> τ ( sqrt(x² + y²) )

fn(x, y τ) τ ( sqrt(x² + y²) )
|x: τ, y: τ| -> τ sqrt(x² + y²)

fn(x y) :: (τ τ) -> τ sqrt(x² + y²)      // -1
fn(x y) :: (τ τ) -> τ ( sqrt(x² + y²) )  // -1


///////
//
//// Linked-in implementations
//for ƒ in [cos sin tan acos asin atan atan2] do
//    for τ in [float double] do
//        fn ƒ(x) :: τ -> τ
//    end
//end
//
//for ƒ in [pow sqrt cbrt hypot] do
//    for τ in [float double] do
//        fn ƒ(x) :: τ -> τ
//    end
//end
//
