deftype τ = float32 | float64

// The implementations for most of the functions below are linked in

// ** Trigonometric functions **

// Compute cosine
fn cos(x) :: τ -> τ
// Compute sine
fn sin(x) :: τ -> τ
// Compute tangent
fn tan(x) :: τ -> τ
// Compute arc cosine
fn acos(x) :: τ -> τ
// Compute arc sine
fn asin(x) :: τ -> τ
// Compute arc tangent
fn atan(x) :: τ -> τ
// Compute arc tangent with two parameters
fn atan2(x) :: τ -> τ


// ** Hyperbolic functions **

// Compute hyperbolic cosine
fn cosh(x) :: τ -> τ
// Compute hyperbolic sine
fn sinh(x) :: τ -> τ
// Compute hyperbolic tangent
fn tanh(x) :: τ -> τ
// Compute arc hyperbolic cosine
fn acosh(x) :: τ -> τ
// Compute arc hyperbolic sine
fn asinh(x) :: τ -> τ
// Compute arc hyperbolic tangent
fn atanh(x) :: τ -> τ


// ** Exponential and logarithmic functions **

// Compute exponential function
fn exp(x) :: τ -> τ
// Compute exponential minus one
fn expm1(x) :: τ -> τ
// Get significand and exponent
fn frexp(x) :: τ -> τ int
// Generate value from significand and exponent
fn ldexp(x exp) :: τ int -> τ
// Break into fractional and integral parts
fn modf(x) :: τ -> int τ
// Compute floating-point base logarithm
fn log(base x) :: τ τ -> τ
// Compute natural logarithm
fn logn(x) :: τ -> τ
// Compute natural logarithm of (x + 1)
fn logp1(x) :: τ -> τ
// Integer binary logarithm
fn ilogb(x) :: τ -> int
// Scale significand using floating-point base exponent
fn scalbn(x n) :: τ int -> τ
fn scalbn(x n) :: τ longint -> τ


// ** Power functions **

// Raise to power
fn pow(base exp) :: τ τ -> τ
// Compute square root
fn sqrt(x) :: τ -> τ
// Compute cubic root
fn cbrt(x) :: τ -> τ
// Compute hypotenuse
fn hypot(x y) // :: τ τ -> τ // should be inferred by the compiler
(
    sqrt(x² + y²)
)


fn hypot(x y) |τ τ -> τ| (
    sqrt(x² + y²)
)

fn hypot(x: τ, y: τ) -> τ (
    sqrt(x² + y²)
)

:: hypot(τ τ) -> τ
fn hypot(x: τ, y: τ) -> τ (
    sqrt(x² + y²)
)

fn(x: τ, y: τ) -> τ (
    sqrt(x² + y²)
)

fn(x y) :: (τ, τ) -> τ (
    sqrt(x² + y²)
)

fn(x y) |τ τ -> τ| (
    sqrt(x² + y²)
)

fn(x y) (
    sqrt(x² + y²)
) :: τ τ -> τ

fn(x y) |τ τ -> τ| sqrt(x² + y²)
fn(x y) sqrt(x² + y²) :: τ τ -> τ


///////
//
//// Linked-in implementations
//for ƒ in [cos sin tan acos asin atan atan2] do
//    for τ in [float double] do
//        fn ƒ(x) :: τ -> τ
//    end
//end
//
//for ƒ in [pow sqrt cbrt hypot] do
//    for τ in [float double] do
//        fn ƒ(x) :: τ -> τ
//    end
//end
//
