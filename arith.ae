"""
Returns a sum of squares of num's decimal digits.
"""
:: int -> int
func square_digits(num) {
    var sum = 0, quot = num, digit int
    while quot != 0 {
        quot, digit = divmod(quot, 10)
        sum += digit * digit
    }
}

"""
Same thing, tail-recursive
"""
:: int, int -> int
func square_digits(num, sum=0) {
    if num == 0 {
        sum
    } else {
        var quot, digit = divmod(num, 10)
        square_digits(quot, sum + digit*digit)
    }
}

"""
Example usage. Filters out input stream of nums leaving only those that are
smaller than the sum of their digits' squares.
"""
func count_small(in: stream) {
    len(stream -> filter ^(x) { x < square_digits(x) })
}

# Method chaining vs iteration

func syntax_exp() {
    var f1 = ^{ math.asin(math.sqrt(&1)) / math.pi * 180 }
    var f2 = ^{ &1.sqrt().asin() / math.pi * 180 }
    var f3 = ^{ &1.sqrt.asin / pi * 180 }
    var f4 = ^{ &1 .sqrt .asin / pi * 180 }
    var f5 = ^{ math.asin(&1.sqrt) / math.pi * 180 }
    var f6 = ^{ &1 -> sqrt -> asin -> (/ math.pi * 180) }
    var f7 = ^{ &1 sqrt asin / math.pi * 180 }
    var f8 = ^{ asin sqrt &1 / math.pi * 180 }
}

func syntax_exp2() {
    var f1 = ^{ strings.reverse(strings.toupper(strings.replace(strings.tolower(str), "abc", "bcd"))) }
    var f2 = ^{ str.tolower.replace("abc", "bcd").toupper.reverse }
    var f3 = ^{ str .tolower .replace("abc", "bcd") .toupper .reverse }
    var f4 = ^{ str -> .tolower -> .replace("abc", "bcd") -> .toupper -> .reverse }
    var f5 = ^{ strings.reverse strings.toupper strings.replace (strings.tolower str) "abc" "bcd" }
}

