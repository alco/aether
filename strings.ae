import strings

func compound_string_op(str) {
    str .tolower .replace("abc", "bcd") .toupper .reverse()
    str $ tolower $ replace("abc", "bcd") $ toupper $ reverse()
}

func compound_string_op2(str) {
    str
    -> .tolower
    -> .replace("abc", "bcd")
    -> .toupper
    -> .reverse
    ;
}

func bytes_to_string(bytes) {
    var buf = copy(bytes)
    var str = string(buf)

    buf[0] = 1 # compile error

    str
}

module strings

:: string -> string
func lowercase(in: str) {
    utf8_string_to_lowercase(str)
}

:: string -> string
func uppercase(in: str) {
    utf8_string_to_uppercase(str)
}

:: string -> string
func reverse(in: str) {
    reverse(str.chars())
}

:: string -> string
func reverse_bytes(in: str) {
    reverse(str.bytes())
}

:: string, string -> bool
func has_prefix(in: prefix <> _, prefix) { true }
func has_prefix(in: _, _) { false }

:: string, string -> bool
func has_suffix(in: _ <> suffix, suffix) { true }
func has_suffix(in: _, _) { false }

:: string, string -> bool
func contains(in: str, substr) {
    _contains(str, substr, 0)
}

func _contains(str, substr, ln) {
    if ln == len(substr) {
        return true
    }

    if ln + len(str) < len(substr) {
        return false
    }

    if str[0] == substr[ln] {
        _contains(str[1:], substr, ln+1)
    } else {
        _contains(str[1:], substr, 0)
    }
}

func bytes() # built-in?
func chars() # built-in?

func split(in: str, index) {
    str.chars() => take(index + 1) => string()
}
