# Method chaining vs iteration

func syntax_exp() {
    var f1 = ^{ math.asin(math.sqrt(&1)) / math.pi * 180 }
    var f2 = ^{ &1.sqrt().asin() / math.pi * 180 }
    var f3 = ^{ &1.sqrt.asin / pi * 180 }
    var f4 = ^{ &1 .sqrt .asin / pi * 180 }
    var f5 = ^{ math.asin(&1.sqrt) / math.pi * 180 }
    var f6 = ^{ &1 -> sqrt -> asin -> (/ math.pi * 180) }
    var f7 = ^{ &1 sqrt asin / math.pi * 180 }
    var f8 = ^{ asin sqrt &1 / math.pi * 180 }
}

func syntax_exp2() {
    var f1 = ^{ strings.reverse(strings.toupper(strings.replace(strings.tolower(str), "abc", "bcd"))) }
    var f2 = ^{ str.tolower.replace("abc", "bcd").toupper.reverse }
    var f3 = ^{ str .tolower .replace("abc", "bcd") .toupper .reverse }
    var f4 = ^{ str -> .tolower -> .replace("abc", "bcd") -> .toupper -> .reverse }
    var f5 = ^{ strings.reverse strings.toupper strings.replace (strings.tolower str) "abc" "bcd" }
}

func syntax_exp3() {
    for p = each point in set {
        var c = scale_point(p)
        var z = complex(0, 0)
        while |z|^2 < 4 and iteration < MAX_ITER {
            z = z^2 + c
        }
        var color = iteration
        plot(z, color)
    }

    # ...

    points -> fn(p) {
        var c = scale_point(p)
        var z = complex(0, 0)
        z = loop({z, c} -> ^(z, c) {
            z^2 + c, c
        } -> limit ^(z, c) { |z|^2 < 4 and count < MAX_ITER })

        var color = count
        plot(p, color)
    }
}

:: string -> int
func parseInt(str) {
    # ...
}

:: string -> int
func parseIntAbs(str) {
    str -> parseInt -> math.abs
}

func parseIntAbs = parseInt -> math.abs
func parseIntAbs = parseInt .abs
func parseIntAbs = math.abs parseInt


// Dataflow

:: int, int, int -> Color, int
func routine(x, y, z) {
    // ...
}

// Diagram:

      x y z
      | | |
    +-^-^-^----+
    | routine  |
    +-.-.------+
   ___/ \_______
  /             \
  |             |
color        distance
  |             |
+-^---+     +---^-+
| op1 |     | op2 |
+-.---+     +-.---+
  \____   ____/
       \ /
       | |
     +-^-^-+
     | add |
     +-.---+
       |
     result
       |
       *


      x y z
      | | |
    +-^-^-^----+
    | routine  |
    +-.-.------+         +-----+
      | +----- color --->| op1 |--+
      |                  +-----+  |   +-----+
      |                           +-->|     |
      |                               | add |-->result
      |                           +-->|     |
      |                  +-----+  |   +-----+
      +------ distance ->| op2 |--+
                         +-----+

// 1. Traditional approach
func main() {
    // The relationship between functions is not as clear
    // as in the diagram
    color, d = routine(1, 2, 3)
    result = add(op1(color), op2(d))

    // Although can be slightly improved
    color, d = routine(1, 2, 3)
    result = add(
        op1(color),
        op2(d)
    )
}

// 2. Add some sugar
func main() {
    // Not clear where data is coming from and where it goes
    result =
      routine(1, 2, 3)
      -> { op1(color)
           op2(distance) }
      -> add
}

// 3. ASCII art
func main() {
    // Not robust at all
    color, d = routine(1, 2, 3)
      |    |
     op1  op2
      |    |
  add(_,   _) -> result
}

// 4. Horizontal approach
func main() {
    routine(1, 2, 3) --> (op1, op2) --> add --> result

    // more formal
    routine(1, 2, 3) --> fn(color, d) --> (op1(color), op2(d)) --> add(*) --> result
}



*** Functions ans infix ops ***

//  apply + [a b c d]
//
//  apply +, [a b c d]
//
//  apply '+, [a b c d]
//
//  apply('+, [a b c d])
//
//  +(a, b, c, d)
//
//  '+(a, b, c, d)
//
//  (+) [a b c d]
//
//  list = [a b c+1+2 d()]
//  funcall(a b c d)
//
//  list = [a, b, c+1+2, d()]
//  funcall(a, b, c, d)
//
//  (funcall a b c d)
//  (. receiver meth1 meth2)
//  (-> (funcall a+1 b^2) (funcall c d))

//  a + f(b, c+1) * d - 1
//
//  a + f(b c+1) * d - 1
//
//  a + (f b c+1) * d - 1
//
//  a + (:f b c+1) * d - 1
//
//  a + (f: b c+1) * d - 1
//
//  (+ a b c d)
//  (- -a b c d)
//  (-: -a b c d)
//  -(-a b c d)

// f❨a b c❩
// +❨a -❨b c❩ 1+2+3 -1❩
//
// +❨a -❨b c❩ (1 + 2 + 3) -1❩
//
// +❨a, -❨b, c❩, (1 + 2 + 3), -1❩

// f<(a b c)>
// f⦅a b c⦆
// f⦗a b c⦘
// f⟨a b c⟩
// f【a b c】
// f〖a b c〗
// f｟a b c｠
// f（a b c）
// f❮a b c❯
// f‹a b c›
// f«a b c»
// f❪a b c❫


