"""
Used to map a stream of elements to a stream of { count, elem } tuples.

Example:

    > "abcd" -> count => []
    [{0, 'a'}, {1, 'b'}, {2, 'c'}, {3, 'd'}]

"""
:: <a> -> <{ int, a }>
func count(stream) {
    var n = 0;
    for elem in stream {
        yield { n, elem }
        n++
    }
}

:: a, int -> { int, a }, int
func count(in: elem, acc=0) {
    { acc, elem }, acc + 1
}

:: (a -> bool), <a> -> <a>
func filter(pred, stream) {
    stream => filter(pred)
}

:: a, (a -> bool) -> a
func filter(in: elem, pred) {
    if !pred(elem) {
        discard
    }
    elem
}

:: <a> -> a
func sum(stream) {
    stream => sum
}

:: (Num a): a, a -> a
func sum(in: elem, acc=default(elem)) {
    elem + acc
}

:: <a>, a, (a, b -> b) -> b
func reduce(stream, initial, f) {
    stream => reduce(initial, f)
}

:: a, a, (a, b -> b) -> b
func reduce(in: elem, acc=default(elem), f) {
    f(elem, acc)
}

:: <a>, b -> b
func into(stream, col) {
    stream => reduce(col, conj)
}

:: a, b -> a
func conj(acc: col, in: elem) {
    conj_builtin(col, elem)
}

:: (a -> a), a -> a
func iterate(f, initial) {
    var last = initial
    for {
        yield last
        last = f(last)
    }
}

:: (a -> a), a -> a
func iterate_recursive(f, initial) {
    yield initial
    f(initial)  # tail-call
}

:: a, bool, (a -> bool) -> bool
func ifgate(in: elem, acc=true, pred) {
    if !pred(elem) {
        abort false
    }
    true
}

:: <a>, (a -> bool) -> <a>, <a>
func partition(in: stream, fn) {
    # FIXME: parallelize
    do_partition(stream, fn, <>, <>)
}

func do_partition(<>, fn, out1, out2) {
    out1, out2
}

func do_partition(< h | t >, fn, out1, out2) {
    if fn(h) {
        do_partition(t, fn, < h | out1 >, out2)
    } else {
        do_partition(t, fn, out1, < h | out2 >)
    }
}
